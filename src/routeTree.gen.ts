/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ShopRouteImport } from './routes/shop'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as CollectionsCategorySlugRouteImport } from './routes/collections/$categorySlug'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminSubcategoriesRouteImport } from './routes/admin/subcategories'
import { Route as AdminProductsRouteImport } from './routes/admin/products'
import { Route as AdminOrdersRouteImport } from './routes/admin/orders'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminAnalyticsRouteImport } from './routes/admin/analytics'
import { Route as authedProfileRouteImport } from './routes/(authed)/profile'
import { Route as authedOrdersRouteImport } from './routes/(authed)/orders'
import { Route as authedLogoutRouteImport } from './routes/(authed)/logout'
import { Route as authedFavoritesRouteImport } from './routes/(authed)/favorites'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ShopRoute = ShopRouteImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsCategorySlugRoute = CollectionsCategorySlugRouteImport.update({
  id: '/collections/$categorySlug',
  path: '/collections/$categorySlug',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSubcategoriesRoute = AdminSubcategoriesRouteImport.update({
  id: '/admin/subcategories',
  path: '/admin/subcategories',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/admin/products',
  path: '/admin/products',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminOrdersRoute = AdminOrdersRouteImport.update({
  id: '/admin/orders',
  path: '/admin/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/admin/categories',
  path: '/admin/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAnalyticsRoute = AdminAnalyticsRouteImport.update({
  id: '/admin/analytics',
  path: '/admin/analytics',
  getParentRoute: () => rootRouteImport,
} as any)
const authedProfileRoute = authedProfileRouteImport.update({
  id: '/(authed)/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const authedOrdersRoute = authedOrdersRouteImport.update({
  id: '/(authed)/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const authedLogoutRoute = authedLogoutRouteImport.update({
  id: '/(authed)/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const authedFavoritesRoute = authedFavoritesRouteImport.update({
  id: '/(authed)/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/(auth)/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/favorites': typeof authedFavoritesRoute
  '/logout': typeof authedLogoutRoute
  '/orders': typeof authedOrdersRoute
  '/profile': typeof authedProfileRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/subcategories': typeof AdminSubcategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/favorites': typeof authedFavoritesRoute
  '/logout': typeof authedLogoutRoute
  '/orders': typeof authedOrdersRoute
  '/profile': typeof authedProfileRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/subcategories': typeof AdminSubcategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(authed)/favorites': typeof authedFavoritesRoute
  '/(authed)/logout': typeof authedLogoutRoute
  '/(authed)/orders': typeof authedOrdersRoute
  '/(authed)/profile': typeof authedProfileRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/subcategories': typeof AdminSubcategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/favorites'
    | '/logout'
    | '/orders'
    | '/profile'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/subcategories'
    | '/admin/users'
    | '/collections/$categorySlug'
    | '/product/$productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/favorites'
    | '/logout'
    | '/orders'
    | '/profile'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/subcategories'
    | '/admin/users'
    | '/collections/$categorySlug'
    | '/product/$productId'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/(auth)/forgot-password'
    | '/(auth)/reset-password'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(authed)/favorites'
    | '/(authed)/logout'
    | '/(authed)/orders'
    | '/(authed)/profile'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/subcategories'
    | '/admin/users'
    | '/collections/$categorySlug'
    | '/product/$productId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  PrivacyRoute: typeof PrivacyRoute
  ShopRoute: typeof ShopRoute
  TermsRoute: typeof TermsRoute
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  authedFavoritesRoute: typeof authedFavoritesRoute
  authedLogoutRoute: typeof authedLogoutRoute
  authedOrdersRoute: typeof authedOrdersRoute
  authedProfileRoute: typeof authedProfileRoute
  AdminAnalyticsRoute: typeof AdminAnalyticsRoute
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminOrdersRoute: typeof AdminOrdersRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminSubcategoriesRoute: typeof AdminSubcategoriesRoute
  AdminUsersRoute: typeof AdminUsersRoute
  CollectionsCategorySlugRoute: typeof CollectionsCategorySlugRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shop': {
      id: '/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$categorySlug': {
      id: '/collections/$categorySlug'
      path: '/collections/$categorySlug'
      fullPath: '/collections/$categorySlug'
      preLoaderRoute: typeof CollectionsCategorySlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/subcategories': {
      id: '/admin/subcategories'
      path: '/admin/subcategories'
      fullPath: '/admin/subcategories'
      preLoaderRoute: typeof AdminSubcategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/admin/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/orders': {
      id: '/admin/orders'
      path: '/admin/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/admin/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/analytics': {
      id: '/admin/analytics'
      path: '/admin/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/profile': {
      id: '/(authed)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof authedProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/orders': {
      id: '/(authed)/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof authedOrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/logout': {
      id: '/(authed)/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authedLogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/favorites': {
      id: '/(authed)/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof authedFavoritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  PrivacyRoute: PrivacyRoute,
  ShopRoute: ShopRoute,
  TermsRoute: TermsRoute,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  authedFavoritesRoute: authedFavoritesRoute,
  authedLogoutRoute: authedLogoutRoute,
  authedOrdersRoute: authedOrdersRoute,
  authedProfileRoute: authedProfileRoute,
  AdminAnalyticsRoute: AdminAnalyticsRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminOrdersRoute: AdminOrdersRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminSubcategoriesRoute: AdminSubcategoriesRoute,
  AdminUsersRoute: AdminUsersRoute,
  CollectionsCategorySlugRoute: CollectionsCategorySlugRoute,
  ProductProductIdRoute: ProductProductIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
