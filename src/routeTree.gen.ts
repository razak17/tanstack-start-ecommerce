/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ShopRouteImport } from './routes/shop'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as CollectionsCategorySlugRouteImport } from './routes/collections/$categorySlug'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as AdminDashboardIndexRouteImport } from './routes/admin/dashboard/index'
import { Route as authedProfileIndexRouteImport } from './routes/(authed)/profile/index'
import { Route as authedOrdersIndexRouteImport } from './routes/(authed)/orders/index'
import { Route as authedLogoutIndexRouteImport } from './routes/(authed)/logout/index'
import { Route as authedFavoritesIndexRouteImport } from './routes/(authed)/favorites/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ShopRoute = ShopRouteImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsCategorySlugRoute = CollectionsCategorySlugRouteImport.update({
  id: '/collections/$categorySlug',
  path: '/collections/$categorySlug',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/(auth)/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/admin/dashboard/',
  path: '/admin/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const authedProfileIndexRoute = authedProfileIndexRouteImport.update({
  id: '/(authed)/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const authedOrdersIndexRoute = authedOrdersIndexRouteImport.update({
  id: '/(authed)/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const authedLogoutIndexRoute = authedLogoutIndexRouteImport.update({
  id: '/(authed)/logout/',
  path: '/logout/',
  getParentRoute: () => rootRouteImport,
} as any)
const authedFavoritesIndexRoute = authedFavoritesIndexRouteImport.update({
  id: '/(authed)/favorites/',
  path: '/favorites/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/favorites': typeof authedFavoritesIndexRoute
  '/logout': typeof authedLogoutIndexRoute
  '/orders': typeof authedOrdersIndexRoute
  '/profile': typeof authedProfileIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/favorites': typeof authedFavoritesIndexRoute
  '/logout': typeof authedLogoutIndexRoute
  '/orders': typeof authedOrdersIndexRoute
  '/profile': typeof authedProfileIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/privacy': typeof PrivacyRoute
  '/shop': typeof ShopRoute
  '/terms': typeof TermsRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/collections/$categorySlug': typeof CollectionsCategorySlugRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/(authed)/favorites/': typeof authedFavoritesIndexRoute
  '/(authed)/logout/': typeof authedLogoutIndexRoute
  '/(authed)/orders/': typeof authedOrdersIndexRoute
  '/(authed)/profile/': typeof authedProfileIndexRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/collections/$categorySlug'
    | '/product/$productId'
    | '/favorites'
    | '/logout'
    | '/orders'
    | '/profile'
    | '/admin/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/collections/$categorySlug'
    | '/product/$productId'
    | '/favorites'
    | '/logout'
    | '/orders'
    | '/profile'
    | '/admin/dashboard'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/(auth)/forgot-password'
    | '/(auth)/reset-password'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/collections/$categorySlug'
    | '/product/$productId'
    | '/(authed)/favorites/'
    | '/(authed)/logout/'
    | '/(authed)/orders/'
    | '/(authed)/profile/'
    | '/admin/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  PrivacyRoute: typeof PrivacyRoute
  ShopRoute: typeof ShopRoute
  TermsRoute: typeof TermsRoute
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  CollectionsCategorySlugRoute: typeof CollectionsCategorySlugRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  authedFavoritesIndexRoute: typeof authedFavoritesIndexRoute
  authedLogoutIndexRoute: typeof authedLogoutIndexRoute
  authedOrdersIndexRoute: typeof authedOrdersIndexRoute
  authedProfileIndexRoute: typeof authedProfileIndexRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shop': {
      id: '/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$categorySlug': {
      id: '/collections/$categorySlug'
      path: '/collections/$categorySlug'
      fullPath: '/collections/$categorySlug'
      preLoaderRoute: typeof CollectionsCategorySlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/profile/': {
      id: '/(authed)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof authedProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/orders/': {
      id: '/(authed)/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof authedOrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/logout/': {
      id: '/(authed)/logout/'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authedLogoutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/favorites/': {
      id: '/(authed)/favorites/'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof authedFavoritesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  PrivacyRoute: PrivacyRoute,
  ShopRoute: ShopRoute,
  TermsRoute: TermsRoute,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  CollectionsCategorySlugRoute: CollectionsCategorySlugRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  authedFavoritesIndexRoute: authedFavoritesIndexRoute,
  authedLogoutIndexRoute: authedLogoutIndexRoute,
  authedOrdersIndexRoute: authedOrdersIndexRoute,
  authedProfileIndexRoute: authedProfileIndexRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
