/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as siteRouteRouteImport } from './routes/(site)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as siteIndexRouteImport } from './routes/(site)/index'
import { Route as siteprotectedRouteRouteImport } from './routes/(site)/(protected)/route'
import { Route as authpublicRouteRouteImport } from './routes/(auth)/(public)/route'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminSubcategoriesIndexRouteImport } from './routes/admin/subcategories/index'
import { Route as AdminProductsIndexRouteImport } from './routes/admin/products/index'
import { Route as AdminOrdersIndexRouteImport } from './routes/admin/orders/index'
import { Route as AdminDashboardIndexRouteImport } from './routes/admin/dashboard/index'
import { Route as AdminCategoriesIndexRouteImport } from './routes/admin/categories/index'
import { Route as AdminAnalyticsIndexRouteImport } from './routes/admin/analytics/index'
import { Route as siteTermsIndexRouteImport } from './routes/(site)/terms/index'
import { Route as siteShopIndexRouteImport } from './routes/(site)/shop/index'
import { Route as sitePrivacyIndexRouteImport } from './routes/(site)/privacy/index'
import { Route as siteCartIndexRouteImport } from './routes/(site)/cart/index'
import { Route as authLogoutIndexRouteImport } from './routes/(auth)/logout/index'
import { Route as siteProductProductIdRouteImport } from './routes/(site)/product/$productId'
import { Route as siteCollectionCategorySlugRouteImport } from './routes/(site)/collection/$categorySlug'
import { Route as siteprotectedProfileIndexRouteImport } from './routes/(site)/(protected)/profile/index'
import { Route as siteprotectedOrdersIndexRouteImport } from './routes/(site)/(protected)/orders/index'
import { Route as siteprotectedFavoritesIndexRouteImport } from './routes/(site)/(protected)/favorites/index'
import { Route as authpublicSignUpIndexRouteImport } from './routes/(auth)/(public)/sign-up/index'
import { Route as authpublicSignInIndexRouteImport } from './routes/(auth)/(public)/sign-in/index'
import { Route as authpublicResetPasswordIndexRouteImport } from './routes/(auth)/(public)/reset-password/index'
import { Route as authpublicForgotPasswordIndexRouteImport } from './routes/(auth)/(public)/forgot-password/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const siteRouteRoute = siteRouteRouteImport.update({
  id: '/(site)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const siteIndexRoute = siteIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => siteRouteRoute,
} as any)
const siteprotectedRouteRoute = siteprotectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => siteRouteRoute,
} as any)
const authpublicRouteRoute = authpublicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => authRouteRoute,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminSubcategoriesIndexRoute = AdminSubcategoriesIndexRouteImport.update({
  id: '/subcategories/',
  path: '/subcategories/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminProductsIndexRoute = AdminProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminOrdersIndexRoute = AdminOrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCategoriesIndexRoute = AdminCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAnalyticsIndexRoute = AdminAnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const siteTermsIndexRoute = siteTermsIndexRouteImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => siteRouteRoute,
} as any)
const siteShopIndexRoute = siteShopIndexRouteImport.update({
  id: '/shop/',
  path: '/shop/',
  getParentRoute: () => siteRouteRoute,
} as any)
const sitePrivacyIndexRoute = sitePrivacyIndexRouteImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => siteRouteRoute,
} as any)
const siteCartIndexRoute = siteCartIndexRouteImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => siteRouteRoute,
} as any)
const authLogoutIndexRoute = authLogoutIndexRouteImport.update({
  id: '/logout/',
  path: '/logout/',
  getParentRoute: () => authRouteRoute,
} as any)
const siteProductProductIdRoute = siteProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => siteRouteRoute,
} as any)
const siteCollectionCategorySlugRoute =
  siteCollectionCategorySlugRouteImport.update({
    id: '/collection/$categorySlug',
    path: '/collection/$categorySlug',
    getParentRoute: () => siteRouteRoute,
  } as any)
const siteprotectedProfileIndexRoute =
  siteprotectedProfileIndexRouteImport.update({
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => siteprotectedRouteRoute,
  } as any)
const siteprotectedOrdersIndexRoute =
  siteprotectedOrdersIndexRouteImport.update({
    id: '/orders/',
    path: '/orders/',
    getParentRoute: () => siteprotectedRouteRoute,
  } as any)
const siteprotectedFavoritesIndexRoute =
  siteprotectedFavoritesIndexRouteImport.update({
    id: '/favorites/',
    path: '/favorites/',
    getParentRoute: () => siteprotectedRouteRoute,
  } as any)
const authpublicSignUpIndexRoute = authpublicSignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => authpublicRouteRoute,
} as any)
const authpublicSignInIndexRoute = authpublicSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => authpublicRouteRoute,
} as any)
const authpublicResetPasswordIndexRoute =
  authpublicResetPasswordIndexRouteImport.update({
    id: '/reset-password/',
    path: '/reset-password/',
    getParentRoute: () => authpublicRouteRoute,
  } as any)
const authpublicForgotPasswordIndexRoute =
  authpublicForgotPasswordIndexRouteImport.update({
    id: '/forgot-password/',
    path: '/forgot-password/',
    getParentRoute: () => authpublicRouteRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof siteIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/collection/$categorySlug': typeof siteCollectionCategorySlugRoute
  '/product/$productId': typeof siteProductProductIdRoute
  '/logout': typeof authLogoutIndexRoute
  '/cart': typeof siteCartIndexRoute
  '/privacy': typeof sitePrivacyIndexRoute
  '/shop': typeof siteShopIndexRoute
  '/terms': typeof siteTermsIndexRoute
  '/admin/analytics': typeof AdminAnalyticsIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/subcategories': typeof AdminSubcategoriesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/forgot-password': typeof authpublicForgotPasswordIndexRoute
  '/reset-password': typeof authpublicResetPasswordIndexRoute
  '/sign-in': typeof authpublicSignInIndexRoute
  '/sign-up': typeof authpublicSignUpIndexRoute
  '/favorites': typeof siteprotectedFavoritesIndexRoute
  '/orders': typeof siteprotectedOrdersIndexRoute
  '/profile': typeof siteprotectedProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof siteIndexRoute
  '/admin': typeof AdminIndexRoute
  '/collection/$categorySlug': typeof siteCollectionCategorySlugRoute
  '/product/$productId': typeof siteProductProductIdRoute
  '/logout': typeof authLogoutIndexRoute
  '/cart': typeof siteCartIndexRoute
  '/privacy': typeof sitePrivacyIndexRoute
  '/shop': typeof siteShopIndexRoute
  '/terms': typeof siteTermsIndexRoute
  '/admin/analytics': typeof AdminAnalyticsIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/subcategories': typeof AdminSubcategoriesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/forgot-password': typeof authpublicForgotPasswordIndexRoute
  '/reset-password': typeof authpublicResetPasswordIndexRoute
  '/sign-in': typeof authpublicSignInIndexRoute
  '/sign-up': typeof authpublicSignUpIndexRoute
  '/favorites': typeof siteprotectedFavoritesIndexRoute
  '/orders': typeof siteprotectedOrdersIndexRoute
  '/profile': typeof siteprotectedProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(site)': typeof siteRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/(auth)/(public)': typeof authpublicRouteRouteWithChildren
  '/(site)/(protected)': typeof siteprotectedRouteRouteWithChildren
  '/(site)/': typeof siteIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/(site)/collection/$categorySlug': typeof siteCollectionCategorySlugRoute
  '/(site)/product/$productId': typeof siteProductProductIdRoute
  '/(auth)/logout/': typeof authLogoutIndexRoute
  '/(site)/cart/': typeof siteCartIndexRoute
  '/(site)/privacy/': typeof sitePrivacyIndexRoute
  '/(site)/shop/': typeof siteShopIndexRoute
  '/(site)/terms/': typeof siteTermsIndexRoute
  '/admin/analytics/': typeof AdminAnalyticsIndexRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
  '/admin/orders/': typeof AdminOrdersIndexRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/subcategories/': typeof AdminSubcategoriesIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
  '/(auth)/(public)/forgot-password/': typeof authpublicForgotPasswordIndexRoute
  '/(auth)/(public)/reset-password/': typeof authpublicResetPasswordIndexRoute
  '/(auth)/(public)/sign-in/': typeof authpublicSignInIndexRoute
  '/(auth)/(public)/sign-up/': typeof authpublicSignUpIndexRoute
  '/(site)/(protected)/favorites/': typeof siteprotectedFavoritesIndexRoute
  '/(site)/(protected)/orders/': typeof siteprotectedOrdersIndexRoute
  '/(site)/(protected)/profile/': typeof siteprotectedProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/'
    | '/collection/$categorySlug'
    | '/product/$productId'
    | '/logout'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/subcategories'
    | '/admin/users'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/favorites'
    | '/orders'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/collection/$categorySlug'
    | '/product/$productId'
    | '/logout'
    | '/cart'
    | '/privacy'
    | '/shop'
    | '/terms'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/subcategories'
    | '/admin/users'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/favorites'
    | '/orders'
    | '/profile'
  id:
    | '__root__'
    | '/(auth)'
    | '/(site)'
    | '/admin'
    | '/(auth)/(public)'
    | '/(site)/(protected)'
    | '/(site)/'
    | '/admin/'
    | '/(site)/collection/$categorySlug'
    | '/(site)/product/$productId'
    | '/(auth)/logout/'
    | '/(site)/cart/'
    | '/(site)/privacy/'
    | '/(site)/shop/'
    | '/(site)/terms/'
    | '/admin/analytics/'
    | '/admin/categories/'
    | '/admin/dashboard/'
    | '/admin/orders/'
    | '/admin/products/'
    | '/admin/subcategories/'
    | '/admin/users/'
    | '/(auth)/(public)/forgot-password/'
    | '/(auth)/(public)/reset-password/'
    | '/(auth)/(public)/sign-in/'
    | '/(auth)/(public)/sign-up/'
    | '/(site)/(protected)/favorites/'
    | '/(site)/(protected)/orders/'
    | '/(site)/(protected)/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  siteRouteRoute: typeof siteRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(site)': {
      id: '/(site)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof siteRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/(site)/': {
      id: '/(site)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof siteIndexRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/(protected)': {
      id: '/(site)/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof siteprotectedRouteRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(auth)/(public)': {
      id: '/(auth)/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authpublicRouteRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/subcategories/': {
      id: '/admin/subcategories/'
      path: '/subcategories'
      fullPath: '/admin/subcategories'
      preLoaderRoute: typeof AdminSubcategoriesIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/orders/': {
      id: '/admin/orders/'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/analytics/': {
      id: '/admin/analytics/'
      path: '/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/(site)/terms/': {
      id: '/(site)/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof siteTermsIndexRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/shop/': {
      id: '/(site)/shop/'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof siteShopIndexRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/privacy/': {
      id: '/(site)/privacy/'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof sitePrivacyIndexRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/cart/': {
      id: '/(site)/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof siteCartIndexRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(auth)/logout/': {
      id: '/(auth)/logout/'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authLogoutIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(site)/product/$productId': {
      id: '/(site)/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof siteProductProductIdRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/collection/$categorySlug': {
      id: '/(site)/collection/$categorySlug'
      path: '/collection/$categorySlug'
      fullPath: '/collection/$categorySlug'
      preLoaderRoute: typeof siteCollectionCategorySlugRouteImport
      parentRoute: typeof siteRouteRoute
    }
    '/(site)/(protected)/profile/': {
      id: '/(site)/(protected)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof siteprotectedProfileIndexRouteImport
      parentRoute: typeof siteprotectedRouteRoute
    }
    '/(site)/(protected)/orders/': {
      id: '/(site)/(protected)/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof siteprotectedOrdersIndexRouteImport
      parentRoute: typeof siteprotectedRouteRoute
    }
    '/(site)/(protected)/favorites/': {
      id: '/(site)/(protected)/favorites/'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof siteprotectedFavoritesIndexRouteImport
      parentRoute: typeof siteprotectedRouteRoute
    }
    '/(auth)/(public)/sign-up/': {
      id: '/(auth)/(public)/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authpublicSignUpIndexRouteImport
      parentRoute: typeof authpublicRouteRoute
    }
    '/(auth)/(public)/sign-in/': {
      id: '/(auth)/(public)/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authpublicSignInIndexRouteImport
      parentRoute: typeof authpublicRouteRoute
    }
    '/(auth)/(public)/reset-password/': {
      id: '/(auth)/(public)/reset-password/'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authpublicResetPasswordIndexRouteImport
      parentRoute: typeof authpublicRouteRoute
    }
    '/(auth)/(public)/forgot-password/': {
      id: '/(auth)/(public)/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authpublicForgotPasswordIndexRouteImport
      parentRoute: typeof authpublicRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authpublicRouteRouteChildren {
  authpublicForgotPasswordIndexRoute: typeof authpublicForgotPasswordIndexRoute
  authpublicResetPasswordIndexRoute: typeof authpublicResetPasswordIndexRoute
  authpublicSignInIndexRoute: typeof authpublicSignInIndexRoute
  authpublicSignUpIndexRoute: typeof authpublicSignUpIndexRoute
}

const authpublicRouteRouteChildren: authpublicRouteRouteChildren = {
  authpublicForgotPasswordIndexRoute: authpublicForgotPasswordIndexRoute,
  authpublicResetPasswordIndexRoute: authpublicResetPasswordIndexRoute,
  authpublicSignInIndexRoute: authpublicSignInIndexRoute,
  authpublicSignUpIndexRoute: authpublicSignUpIndexRoute,
}

const authpublicRouteRouteWithChildren = authpublicRouteRoute._addFileChildren(
  authpublicRouteRouteChildren,
)

interface authRouteRouteChildren {
  authpublicRouteRoute: typeof authpublicRouteRouteWithChildren
  authLogoutIndexRoute: typeof authLogoutIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authpublicRouteRoute: authpublicRouteRouteWithChildren,
  authLogoutIndexRoute: authLogoutIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface siteprotectedRouteRouteChildren {
  siteprotectedFavoritesIndexRoute: typeof siteprotectedFavoritesIndexRoute
  siteprotectedOrdersIndexRoute: typeof siteprotectedOrdersIndexRoute
  siteprotectedProfileIndexRoute: typeof siteprotectedProfileIndexRoute
}

const siteprotectedRouteRouteChildren: siteprotectedRouteRouteChildren = {
  siteprotectedFavoritesIndexRoute: siteprotectedFavoritesIndexRoute,
  siteprotectedOrdersIndexRoute: siteprotectedOrdersIndexRoute,
  siteprotectedProfileIndexRoute: siteprotectedProfileIndexRoute,
}

const siteprotectedRouteRouteWithChildren =
  siteprotectedRouteRoute._addFileChildren(siteprotectedRouteRouteChildren)

interface siteRouteRouteChildren {
  siteprotectedRouteRoute: typeof siteprotectedRouteRouteWithChildren
  siteIndexRoute: typeof siteIndexRoute
  siteCollectionCategorySlugRoute: typeof siteCollectionCategorySlugRoute
  siteProductProductIdRoute: typeof siteProductProductIdRoute
  siteCartIndexRoute: typeof siteCartIndexRoute
  sitePrivacyIndexRoute: typeof sitePrivacyIndexRoute
  siteShopIndexRoute: typeof siteShopIndexRoute
  siteTermsIndexRoute: typeof siteTermsIndexRoute
}

const siteRouteRouteChildren: siteRouteRouteChildren = {
  siteprotectedRouteRoute: siteprotectedRouteRouteWithChildren,
  siteIndexRoute: siteIndexRoute,
  siteCollectionCategorySlugRoute: siteCollectionCategorySlugRoute,
  siteProductProductIdRoute: siteProductProductIdRoute,
  siteCartIndexRoute: siteCartIndexRoute,
  sitePrivacyIndexRoute: sitePrivacyIndexRoute,
  siteShopIndexRoute: siteShopIndexRoute,
  siteTermsIndexRoute: siteTermsIndexRoute,
}

const siteRouteRouteWithChildren = siteRouteRoute._addFileChildren(
  siteRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminAnalyticsIndexRoute: typeof AdminAnalyticsIndexRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
  AdminOrdersIndexRoute: typeof AdminOrdersIndexRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
  AdminSubcategoriesIndexRoute: typeof AdminSubcategoriesIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminAnalyticsIndexRoute: AdminAnalyticsIndexRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
  AdminOrdersIndexRoute: AdminOrdersIndexRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
  AdminSubcategoriesIndexRoute: AdminSubcategoriesIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  siteRouteRoute: siteRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
